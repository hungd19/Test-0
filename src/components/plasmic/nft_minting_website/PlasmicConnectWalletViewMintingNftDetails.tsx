// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mbwfffo6qt2cXYJuDjuisP
// Component: nUwrkee-Z1Sx

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ConnectWalletButton } from "suinova-nft-builder/dist/index.js";
import { WalletIcon } from "suinova-nft-builder/dist/index.js";
import { CopyIcon } from "suinova-nft-builder/dist/index.js";
import { UserIcon } from "suinova-nft-builder/dist/index.js";
import { LogoutIcon } from "suinova-nft-builder/dist/index.js";
import { Tabs } from "@plasmicpkgs/antd/skinny/registerTabs";
import { TabPane } from "@plasmicpkgs/antd/skinny/registerTabs";
import { AntdSteps } from "@plasmicpkgs/antd5/skinny/registerSteps";

import { useScreenVariants as useScreenVariantsqmzEytFlGv9Q } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QmzEytFlGv9q/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: 66MC2d9B7YecVEphuUMtqF/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mbwfffo6qt2cXYJuDjuisP/projectcss
import sty from "./PlasmicConnectWalletViewMintingNftDetails.module.css"; // plasmic-import: nUwrkee-Z1Sx/css

import HomeSvgIcon from "./icons/PlasmicIcon__HomeSvg"; // plasmic-import: e0Z2kUFHxuq4/icon

createPlasmicElementProxy;

export type PlasmicConnectWalletViewMintingNftDetails__VariantMembers = {};
export type PlasmicConnectWalletViewMintingNftDetails__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicConnectWalletViewMintingNftDetails__VariantsArgs;
export const PlasmicConnectWalletViewMintingNftDetails__VariantProps =
  new Array<VariantPropType>();

export type PlasmicConnectWalletViewMintingNftDetails__ArgsType = {};
type ArgPropType = keyof PlasmicConnectWalletViewMintingNftDetails__ArgsType;
export const PlasmicConnectWalletViewMintingNftDetails__ArgProps =
  new Array<ArgPropType>();

export type PlasmicConnectWalletViewMintingNftDetails__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  connectWalletButton?: Flex__<typeof ConnectWalletButton>;
  walletIcon?: Flex__<typeof WalletIcon>;
  copyIcon?: Flex__<typeof CopyIcon>;
  userIcon?: Flex__<typeof UserIcon>;
  logoutIconIcon?: Flex__<typeof LogoutIcon>;
  sub?: Flex__<"sub">;
  antdTabs?: Flex__<typeof Tabs>;
  steps?: Flex__<typeof AntdSteps>;
};

export interface DefaultConnectWalletViewMintingNftDetailsProps {
  className?: string;
}

const $$ = {};

function PlasmicConnectWalletViewMintingNftDetails__RenderFunc(props: {
  variants: PlasmicConnectWalletViewMintingNftDetails__VariantsArgs;
  args: PlasmicConnectWalletViewMintingNftDetails__ArgsType;
  overrides: PlasmicConnectWalletViewMintingNftDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "antdTabs.activeKey",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "tabletSmall") ? "1" : "1"
      },
      {
        path: "steps.current",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "teamMembers",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "james",
            role: "Co Founder",
            image:
              "https://s3-alpha-sig.figma.com/img/21c1/c284/eddacccb4e22ee7d2abea1058a784bf2?Expires=1745193600&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=gCneODEcNL1rKq3gWwUkRGlMlkJiFOW-TSt3US569UZ3P2lun0RdhKinihk9KoYX7OFOXMaHGpH-NcFt6CbRZJRdIju7Ac9teLYODgx3M8j5PlwFRW9gpvvQJ88y5BZCW-tc7Ud0mJrcutMb7CVHtyRek9FVM2acomJeFji2h6wYaGQ5hC8-mWxMJRyEG1sxoJjUe8N0G3nDXDbvBlLi4GX0cpx-Ie1jxIt7jfnKoelViCqvdazv04PhghHCqOEDeXG68XlxoY45nY2aKZd~qyT5zAP98AgT-nxYMzIVtORNaH3UxVFAF32Bc~fpcRk8FkheFehe9hSyBV8rEBPysg__"
          },
          {
            name: "Bryan",
            role: "Co Founder",
            image:
              "https://s3-alpha-sig.figma.com/img/51a2/6677/88ebcdbeeab9f107b69a80d1053e1aa1?Expires=1745193600&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=nZgDTj9r9EJOqwOdteIogFbRnfPps9qzj63642UCBB7OyEexD585cAqh-R7ZkyRkxqKCoDJx2BYh3-rqougZe0FjFWtWXPbEV7usjJXGox1YbvoXlMBWXbb4RMk6lWnQux1VDxgrAIXvkr7Uuw4Rbee1wwGlkel89eLNOmePafMPIf5waCKHAlBDygchtYFFAk57ICg~o~leq-97YNz2tUsOgYoAESlD7fIOiVFoPzrJEbkG9KRYt~4laQ88xSRnWCU7bSnAxu468Riptg35Zs-kY1XNC671eFhD01ilEvzWi1-rmt2Biwcn7iiJlISyLfsgyDpAf~F~Av3c8d07bw__"
          },
          {
            name: "Emily",
            role: "Artist",
            image:
              "https://s3-alpha-sig.figma.com/img/b551/caf1/a50da17c794f41c2b771e5502c81c73e?Expires=1745193600&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=GsoKh7MpJqm2TJDByvMOwq8hI9WuXVJg5-9fmELiq~HpexPjVmAOwxZKvJbKG5vEx6dzq5p5tfeMXluTXtolvOhBUGIzaHS2agzOROw0EHNwLmPLLg26HLnT70TOK4g6Iejv-nn0cA5jfLZMsiXzecohVjpUTfcDG9PLSg4gaHF4PNu~VwxdSAb5OuZETkp8JIRzQUeNFin2AJQeNwYw~CSEDbCzMVsXfjESv4zKxXOXkJL5d35l4WzdBRkskLgzKenvCu8CxlKwMHv6xCTY3aZwbcKtk45qy8r7DubMr5CL4g3NOIDZEsWLugGfyParilJxJMx7WB-1e1zFvtVpUw__"
          }
        ]
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "countDownInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          day: 0,
          hour: 0,
          minute: 0,
          second: 0
        })
      },
      {
        path: "timerId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "timerStart",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2025-05-21T08:59:02.442Z"
      },
      {
        path: "timerEnd",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2025-05-22T09:10:17.405Z"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqmzEytFlGv9Q()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_css.plasmic_tokens,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function countdownTimer(startDate, endDate) {
                          const start = new Date(startDate);
                          const target = new Date(endDate);
                          const now = new Date();
                          if (now <= start || now > target) {
                            return {
                              days: 0,
                              hours: 0,
                              minutes: 0,
                              seconds: 0
                            };
                          }
                          const diff = target - now;
                          const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                          const hours = Math.floor(
                            (diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
                          );
                          const minutes = Math.floor(
                            (diff % (1000 * 60 * 60)) / (1000 * 60)
                          );
                          const seconds = Math.floor(
                            (diff % (1000 * 60)) / 1000
                          );
                          return {
                            days,
                            hours,
                            minutes,
                            seconds
                          };
                        }
                        function startCountdown(startDate, endDate, callback) {
                          const timer = setInterval(() => {
                            const timeLeft = countdownTimer(startDate, endDate);
                            callback(timeLeft);
                            if (
                              !timeLeft ||
                              (timeLeft.days === 0 &&
                                timeLeft.hours === 0 &&
                                timeLeft.minutes === 0 &&
                                timeLeft.seconds === 0)
                            ) {
                              clearInterval(timer);
                            }
                          }, 1000);
                          $state.timerId = timer;
                        }
                        return startCountdown(
                          $state.timerStart,
                          $state.timerEnd,
                          timeLeft => {
                            $state.countDownInfo.day = timeLeft.days;
                            $state.countDownInfo.hour = timeLeft.hours;
                            $state.countDownInfo.minute = timeLeft.minutes;
                            $state.countDownInfo.second = timeLeft.seconds;
                          }
                        );
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          onMouseLeave={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        clearInterval($state.timerId);
                        return ($state.timerId = 0);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ptLw1)}>
            <div className={classNames(projectcss.all, sty.freeBox__rawqf)}>
              <div className={classNames(projectcss.all, sty.freeBox__uTO6)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4Jwlf)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vSk5C)}
                  >
                    <HomeSvgIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m44QG
                      )}
                    >
                      {"NFT Marketplace"}
                    </div>
                  </Stack__>
                  <ConnectWalletButton
                    data-plasmic-name={"connectWalletButton"}
                    data-plasmic-override={overrides.connectWalletButton}
                    className={classNames(
                      "__wab_instance",
                      sty.connectWalletButton
                    )}
                    connectText={"Connect Wallet"}
                    copyIcon={
                      <CopyIcon
                        data-plasmic-name={"copyIcon"}
                        data-plasmic-override={overrides.copyIcon}
                        className={
                          "" + " " + classNames("__wab_instance", sty.copyIcon)
                        }
                        iconColor={"#27273A"}
                      />
                    }
                    icon={
                      <WalletIcon
                        data-plasmic-name={"walletIcon"}
                        data-plasmic-override={overrides.walletIcon}
                        className={
                          "" +
                          " " +
                          classNames("__wab_instance", sty.walletIcon)
                        }
                      />
                    }
                    logoutIcon={
                      <LogoutIcon
                        data-plasmic-name={"logoutIconIcon"}
                        data-plasmic-override={overrides.logoutIconIcon}
                        className={
                          "" +
                          " " +
                          classNames("__wab_instance", sty.logoutIconIcon)
                        }
                      />
                    }
                    userIcon={
                      <UserIcon
                        data-plasmic-name={"userIcon"}
                        data-plasmic-override={overrides.userIcon}
                        className={
                          "" + " " + classNames("__wab_instance", sty.userIcon)
                        }
                      />
                    }
                  />
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__roAk)}>
                <div className={classNames(projectcss.all, sty.freeBox__uLKjO)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d9GaE
                    )}
                  >
                    {"Magic Astronauts"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0XFaY)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hbnhp)}
                      displayHeight={"auto"}
                      displayMaxHeight={
                        hasVariant(globalVariants, "screen", "tabletSmall")
                          ? "550px"
                          : "400px"
                      }
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletSmall")
                          ? "none"
                          : "500px"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tablet")
                          ? "100%"
                          : "auto"
                      }
                      height={
                        hasVariant(globalVariants, "screen", "tabletSmall")
                          ? ``
                          : "400px"
                      }
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return "https://suinova.var-meta.com/static/img/minting-illus.png";
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "https://suinova.var-meta.com/static/img/minting-illus.png";
                          }
                          throw e;
                        }
                      })()}
                      width={
                        hasVariant(globalVariants, "screen", "tablet")
                          ? ``
                          : "500px"
                      }
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__fnJl5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s6CqG
                        )}
                      >
                        {"Join Whitelist"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z6CnD
                        )}
                      >
                        {"Exclusive minting for whitelisted members"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ogZwH
                        )}
                      >
                        {"ENDS IN"}
                      </div>
                      <Stack__
                        as={"sub"}
                        data-plasmic-name={"sub"}
                        data-plasmic-override={overrides.sub}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.sub)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__seYyo
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__blOY
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return String(
                                    $state.countDownInfo.day || 0
                                  ).padStart(2, "0");
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "01";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wYagm
                            )}
                          >
                            {"day"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l3WHk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fvZoM
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return String(
                                    $state.countDownInfo.hour || 0
                                  ).padStart(2, "0");
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "10";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dLwUa
                            )}
                          >
                            {"hour"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qgUv3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j9CVg
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return String(
                                    $state.countDownInfo.minute || 0
                                  ).padStart(2, "0");
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "10";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___53Ene
                            )}
                          >
                            {"minute"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rFVas
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tgMqE
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return String(
                                    $state.countDownInfo.second || 0
                                  ).padStart(2, "0");
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "30";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gGovJ
                            )}
                          >
                            {"second"}
                          </div>
                        </div>
                      </Stack__>
                    </div>
                  </Stack__>
                  <Tabs
                    data-plasmic-name={"antdTabs"}
                    data-plasmic-override={overrides.antdTabs}
                    activeKey={generateStateValueProp($state, [
                      "antdTabs",
                      "activeKey"
                    ])}
                    className={classNames("__wab_instance", sty.antdTabs)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "antdTabs",
                        "activeKey"
                      ]).apply(null, eventArgs);
                    }}
                  >
                    <TabPane
                      className={classNames(
                        "__wab_instance",
                        sty.antdTabPane__uu7CT
                      )}
                      key={"1"}
                      tab={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ev1E
                          )}
                        >
                          {"Overview"}
                        </div>
                      }
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n0Oip
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9O1Sb
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sqpJ
                            )}
                          >
                            {"Magic Astronauts"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fVs3N
                            )}
                          >
                            {
                              "Embark on a Cosmic Journey with Magic Astronauts! \ud83d\ude80\u2728\nWelcome to the Magic Astronauts NFT collection\u2014a mesmerizing fusion of space exploration and ethereal wonder! Each Magic Astronaut is a unique digital masterpiece, blending futuristic space gear with mystical elements that capture the boundless imagination of the cosmos."
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wYgCy
                            )}
                          >
                            {"Collection Highlights"}
                          </div>
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__ru9ZN
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                sty.li__wkNtj
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ik3H
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uUbz7
                                  )}
                                >
                                  {
                                    "Unique Artworks: 1,000 one-of-a-kind NFTs, each featuring a Magic Astronaut with distinct traits, suits, and cosmic backgrounds."
                                  }
                                </div>
                              </div>
                            </li>
                          </ul>
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__w4B
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                sty.li___5PXt1
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sgo59
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cDxjy
                                  )}
                                >
                                  {
                                    "Surreal Aesthetics: Inspired by the intersection of science fiction and fantasy, our astronauts float through enchanted cloudscapes, glowing nebulae, and starry voids."
                                  }
                                </div>
                              </div>
                            </li>
                          </ul>
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul___6KPsj
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                sty.li__nuoOw
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kAvjw
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__woSeS
                                  )}
                                >
                                  {
                                    "Utility & Perks: Holders gain access to exclusive virtual space expeditions, community events, and future airdrops in the Magic Astronauts universe."
                                  }
                                </div>
                              </div>
                            </li>
                          </ul>
                        </div>
                        <AntdSteps
                          data-plasmic-name={"steps"}
                          data-plasmic-override={overrides.steps}
                          className={classNames("__wab_instance", sty.steps)}
                          current={generateStateValueProp($state, [
                            "steps",
                            "current"
                          ])}
                          direction={"vertical"}
                          items={(() => {
                            const __composite = [
                              { title: null, description: null },
                              { title: null, description: null },
                              { title: null, description: null, disabled: null }
                            ];
                            __composite["0"]["title"] = "March 20, 2025";
                            __composite["0"]["description"] =
                              "Early access and exclusive benefits for early supporters";
                            __composite["1"]["title"] = "April 20, 2025";
                            __composite["1"]["description"] =
                              "Priority minting for whitelisted members";
                            __composite["2"]["title"] = "May 20, 2025";
                            __composite["2"]["description"] =
                              "Open minting for everyone";
                            __composite["2"]["disabled"] = false;
                            return __composite;
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "steps",
                              "current"
                            ]).apply(null, eventArgs);
                          }}
                          progressDot={false}
                          responsive={true}
                          size={"small"}
                        />
                      </Stack__>
                    </TabPane>
                    <TabPane
                      className={classNames(
                        "__wab_instance",
                        sty.antdTabPane__jgdG
                      )}
                      key={"2"}
                      tab={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dHoxs
                          )}
                        >
                          {"Team"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eANpB
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mYqak
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5L1B7
                                )}
                                key={currentIndex}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__b9RRn)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"200px"}
                                  displayMaxWidth={"none"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={(() => {
                                    try {
                                      return currentItem.img;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "https://s3-alpha-sig.figma.com/img/d125/0dcf/43d2a28cf3971315cbc5d8f588f7d3da?Expires=1744588800&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=QCo3rE7lOrN-ynf84KzwxQQi1552o2sj0e-Zkm1u-lqkuVjKB10BiogIbM~tOfyfZqWkpW7c5pM2dBBGIRlg1Qyy~iJ5~9EHfgREFixlns62HXLXaLHFJRTXth2ZEuFJm5sZ0uTdrvmv8cW0oTtZFGpZ2AEy7cPYD8gsMxKXyboiNLVXO301QHK5TPmnVdKrx5kGEqtGvud6OPtqd5Tu19Omt5FqvrW-ZF2WtP2ELeymdquEQ~z9JnGcUy1ZbpYF86djav6ceaTIYpNhuBRJ5Gqp10NSRfbz~AEwfaPPyag2YQrtX9UMu3payh~uHTfm~u8i0YG5T7LLD9ZnmxWdow__";
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__l6TRs
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Magic Astronaut #001 ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5S9Ri
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.price;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "5.67 SUI";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qny4Z
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___1QGqU
                                )}
                                key={currentIndex}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__kWLps)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"200px"}
                                  displayMaxWidth={"none"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={(() => {
                                    try {
                                      return currentItem.img;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "https://s3-alpha-sig.figma.com/img/d125/0dcf/43d2a28cf3971315cbc5d8f588f7d3da?Expires=1744588800&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=QCo3rE7lOrN-ynf84KzwxQQi1552o2sj0e-Zkm1u-lqkuVjKB10BiogIbM~tOfyfZqWkpW7c5pM2dBBGIRlg1Qyy~iJ5~9EHfgREFixlns62HXLXaLHFJRTXth2ZEuFJm5sZ0uTdrvmv8cW0oTtZFGpZ2AEy7cPYD8gsMxKXyboiNLVXO301QHK5TPmnVdKrx5kGEqtGvud6OPtqd5Tu19Omt5FqvrW-ZF2WtP2ELeymdquEQ~z9JnGcUy1ZbpYF86djav6ceaTIYpNhuBRJ5Gqp10NSRfbz~AEwfaPPyag2YQrtX9UMu3payh~uHTfm~u8i0YG5T7LLD9ZnmxWdow__";
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ka1Tm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Magic Astronaut #001 ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vs1Qo
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.price;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "5.67 SUI";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hjuxq
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.teamMembers;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rIuvM
                              )}
                              key={currentIndex}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___8UVq)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileSmall"
                                  )
                                    ? "350px"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileLarge"
                                      )
                                    ? "280px"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletSmall"
                                      )
                                    ? "260px"
                                    : "160px"
                                }
                                displayMaxHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletSmall"
                                  )
                                    ? "none"
                                    : "160px"
                                }
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"auto"}
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return currentItem.image;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "https://s3-alpha-sig.figma.com/img/21c1/c284/eddacccb4e22ee7d2abea1058a784bf2?Expires=1745193600&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=gCneODEcNL1rKq3gWwUkRGlMlkJiFOW-TSt3US569UZ3P2lun0RdhKinihk9KoYX7OFOXMaHGpH-NcFt6CbRZJRdIju7Ac9teLYODgx3M8j5PlwFRW9gpvvQJ88y5BZCW-tc7Ud0mJrcutMb7CVHtyRek9FVM2acomJeFji2h6wYaGQ5hC8-mWxMJRyEG1sxoJjUe8N0G3nDXDbvBlLi4GX0cpx-Ie1jxIt7jfnKoelViCqvdazv04PhghHCqOEDeXG68XlxoY45nY2aKZd~qyT5zAP98AgT-nxYMzIVtORNaH3UxVFAF32Bc~fpcRk8FkheFehe9hSyBV8rEBPysg__";
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__glEW
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wUGh
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "James";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__or4Oa
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.role;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Co Founder";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.freeBox__gso)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hLf3L
                          )}
                        />
                      </div>
                    </TabPane>
                  </Tabs>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "svg",
    "connectWalletButton",
    "walletIcon",
    "copyIcon",
    "userIcon",
    "logoutIconIcon",
    "sub",
    "antdTabs",
    "steps"
  ],
  svg: ["svg"],
  connectWalletButton: [
    "connectWalletButton",
    "walletIcon",
    "copyIcon",
    "userIcon",
    "logoutIconIcon"
  ],
  walletIcon: ["walletIcon"],
  copyIcon: ["copyIcon"],
  userIcon: ["userIcon"],
  logoutIconIcon: ["logoutIconIcon"],
  sub: ["sub"],
  antdTabs: ["antdTabs", "steps"],
  steps: ["steps"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  connectWalletButton: typeof ConnectWalletButton;
  walletIcon: typeof WalletIcon;
  copyIcon: typeof CopyIcon;
  userIcon: typeof UserIcon;
  logoutIconIcon: typeof LogoutIcon;
  sub: "sub";
  antdTabs: typeof Tabs;
  steps: typeof AntdSteps;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConnectWalletViewMintingNftDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConnectWalletViewMintingNftDetails__VariantsArgs;
    args?: PlasmicConnectWalletViewMintingNftDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicConnectWalletViewMintingNftDetails__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicConnectWalletViewMintingNftDetails__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicConnectWalletViewMintingNftDetails__ArgProps,
          internalVariantPropNames:
            PlasmicConnectWalletViewMintingNftDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConnectWalletViewMintingNftDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConnectWalletViewMintingNftDetails";
  } else {
    func.displayName = `PlasmicConnectWalletViewMintingNftDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicConnectWalletViewMintingNftDetails = Object.assign(
  // Top-level PlasmicConnectWalletViewMintingNftDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    connectWalletButton: makeNodeComponent("connectWalletButton"),
    walletIcon: makeNodeComponent("walletIcon"),
    copyIcon: makeNodeComponent("copyIcon"),
    userIcon: makeNodeComponent("userIcon"),
    logoutIconIcon: makeNodeComponent("logoutIconIcon"),
    sub: makeNodeComponent("sub"),
    antdTabs: makeNodeComponent("antdTabs"),
    steps: makeNodeComponent("steps"),

    // Metadata about props expected for PlasmicConnectWalletViewMintingNftDetails
    internalVariantProps:
      PlasmicConnectWalletViewMintingNftDetails__VariantProps,
    internalArgProps: PlasmicConnectWalletViewMintingNftDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConnectWalletViewMintingNftDetails;
/* prettier-ignore-end */
